// Code generated by go-mir. DO NOT EDIT.
// versions:
// - Yesql {{ .YesqlVer }}

package {{ .PkgName }}

import (
	"context"

	"github.com/alimy/yesql"
	"github.com/jmoiron/sqlx"
)

const (
    {{range .AllQuery }}_{{ naming .Name }}{{if notEmptyStr .Scope}}_{{ naming .Scope}}{{end}} = `{{ escape .Query }}`
    {{end -}}
)

{{if .DefaultQueryMapNotEmpty}}type {{ .DefaultStructName }} struct {
    {{range $name, $query := .DefaultQueryMap.FilterByStyle "raw" }}{{ naming $name }}    {{if eq .PrepareStyle "stmt" }}*sqlx.Stmt{{else if eq .PrepareStyle "named_stmt"}}*sqlx.NamedStmt{{else}}string{{end}}    `yesql:"{{ $query.Name }}"`
    {{end}}
    {{- range $name, $query := .DefaultQueryMap.FilterByStyle "stmt" }}{{ naming $name }}    {{if eq .PrepareStyle "stmt" }}*sqlx.Stmt{{else if eq .PrepareStyle "named_stmt"}}*sqlx.NamedStmt{{else}}string{{end}}    `yesql:"{{ $query.Name }}"`
    {{end}}
    {{- range $name, $query := .DefaultQueryMap.FilterByStyle "named_stmt" }}{{ naming $name }}    {{if eq .PrepareStyle "stmt" }}*sqlx.Stmt{{else if eq .PrepareStyle "named_stmt"}}*sqlx.NamedStmt{{else}}string{{end}}    `yesql:"{{ $query.Name }}"`
    {{end -}}
}{{end}}
{{range $scope, $queryMap := .ScopeQuery }}
type {{ naming $scope }} struct {
    yesql.Namespace    `yesql:"{{ $scope }}"`
    {{range $name, $query := $queryMap.FilterByStyle "raw" }}{{ naming $name }}    {{if eq .PrepareStyle "stmt" }}*sqlx.Stmt{{else if eq .PrepareStyle "named_stmt"}}*sqlx.NamedStmt{{else}}string{{end}}    `yesql:"{{ $query.Name }}"`
    {{end}}
    {{- range $name, $query := $queryMap.FilterByStyle "stmt" }}{{ naming $name }}    {{if eq .PrepareStyle "stmt" }}*sqlx.Stmt{{else if eq .PrepareStyle "named_stmt"}}*sqlx.NamedStmt{{else}}string{{end}}    `yesql:"{{ $query.Name }}"`
    {{end}}
    {{- range $name, $query := $queryMap.FilterByStyle "named_stmt" }}{{ naming $name }}    {{if eq .PrepareStyle "stmt" }}*sqlx.Stmt{{else if eq .PrepareStyle "named_stmt"}}*sqlx.NamedStmt{{else}}string{{end}}    `yesql:"{{ $query.Name }}"`
    {{end -}}
}
{{end -}}

{{if .DefaultQueryMapNotEmpty}}
func Build{{ .DefaultStructName }}(p yesql.PreparexBuilder, ctx ...context.Context) (obj *{{ .DefaultStructName }}, err error) {
	var c context.Context
	if len(ctx) > 0 && ctx[0] != nil {
		c = ctx[0]
	} else {
		c = context.Background()
	}
	obj = &{{ .DefaultStructName }}{{if .DefaultQueryMap.IsRawQueryNotEmpty }}{
        {{range $name, $_ := .DefaultQueryMap.FilterByStyle "raw" }}{{ naming $name }}:    p.QueryHook(_{{ naming $name}}),
        {{end}}}{{else}}{}{{end}}
    {{- range $name, $_ := .DefaultQueryMap.FilterByStyle "stmt" }}
    if obj.{{ naming $name }}, err = p.PreparexContext(c, p.Rebind(p.QueryHook(_{{ naming $name }}))); err != nil {
		return
	}{{end}}
    {{- range $name, $_ := .DefaultQueryMap.FilterByStyle "named_stmt" }}
    if obj.{{ naming $name }}, err = p.PrepareNamedContext(c, p.Rebind(p.QueryHook(_{{ naming $name }}))); err != nil {
		return
	}{{end}}
	return
}{{end}}
{{range $scope, $queryMap := .ScopeQuery }}
func Build{{ naming $scope }}(p yesql.PreparexBuilder, ctx ...context.Context) (obj *{{ naming $scope }}, err error) {
    var c context.Context
	if len(ctx) > 0 && ctx[0] != nil {
		c = ctx[0]
	} else {
		c = context.Background()
	}
	obj = &{{naming $scope }}{{if $queryMap.IsRawQueryNotEmpty }}{
        {{range $name, $_ := $queryMap.FilterByStyle "raw" }}{{ naming $name }}:    p.QueryHook(_{{ naming $name}}_{{ naming $scope }}),
        {{end}}}{{else}}{}{{end}}
    {{- range $name, $_ := $queryMap.FilterByStyle "stmt" }}
    if obj.{{ naming $name }}, err = p.PreparexContext(c, p.Rebind(p.QueryHook(_{{ naming $name }}_{{ naming $scope }}))); err != nil {
		return
	}{{end}}
    {{- range $name, $_ := $queryMap.FilterByStyle "named_stmt" }}
    if obj.{{ naming $name }}, err = p.PrepareNamedContext(c, p.Rebind(p.QueryHook(_{{ naming $name }}_{{ naming $scope }}))); err != nil {
		return
	}{{end}}
    return
}
{{end -}}
