// Code generated by Yesql. DO NOT EDIT.
// versions:
// - Yesql {{ .YesqlVer }}

package {{ .PkgName }}

import (
	"context"

	"{{ .SqlxPkgName }}"
    {{if .ScopeQueryNotEmpty}}"github.com/alimy/yesql"{{end}}
)

const (
    {{range .AllQuery }}_{{if notEmptyStr .Scope}}{{ naming .Scope}}_{{end}}{{ naming .Name }} = `{{ escape .Query }}`
    {{end -}}
)

// PreparexContext enhances the Conn interface with context.
type PreparexContext interface {
	// PrepareContext prepares a statement.
	// The provided context is used for the preparation of the statement, not for
	// the execution of the statement.
	PreparexContext(ctx context.Context, query string) (*sqlx.Stmt, error)

	// PrepareNamedContext returns an sqlx.NamedStmt
	PrepareNamedContext(ctx context.Context, query string) (*sqlx.NamedStmt, error)

	// Rebind rebind query to adapte SQL Driver
	Rebind(query string) string
}

// PreparexBuilder preparex builder interface for sqlx
type PreparexBuilder interface {
	PreparexContext
	QueryHook(query string) string
}

{{if .DefaultQueryMapNotEmpty}}type {{ .DefaultStructName }} struct {
    {{range $name, $query := .DefaultQueryMap.FilterByStyle "raw" }}{{ naming $name }}    {{if eq .PrepareStyle "stmt" }}*sqlx.Stmt{{else if eq .PrepareStyle "named_stmt"}}*sqlx.NamedStmt{{else}}string{{end}}    `yesql:"{{ $query.Name }}"`
    {{end}}
    {{- range $name, $query := .DefaultQueryMap.FilterByStyle "stmt" }}{{ naming $name }}    {{if eq .PrepareStyle "stmt" }}*sqlx.Stmt{{else if eq .PrepareStyle "named_stmt"}}*sqlx.NamedStmt{{else}}string{{end}}    `yesql:"{{ $query.Name }}"`
    {{end}}
    {{- range $name, $query := .DefaultQueryMap.FilterByStyle "named_stmt" }}{{ naming $name }}    {{if eq .PrepareStyle "stmt" }}*sqlx.Stmt{{else if eq .PrepareStyle "named_stmt"}}*sqlx.NamedStmt{{else}}string{{end}}    `yesql:"{{ $query.Name }}"`
    {{end -}}
}{{end}}
{{range $scope, $queryMap := .ScopeQuery }}
type {{ naming $scope }} struct {
    yesql.Namespace    `yesql:"{{ $scope }}"`
    {{range $name, $query := $queryMap.FilterByStyle "raw" }}{{ naming $name }}    {{if eq .PrepareStyle "stmt" }}*sqlx.Stmt{{else if eq .PrepareStyle "named_stmt"}}*sqlx.NamedStmt{{else}}string{{end}}    `yesql:"{{ $query.Name }}"`
    {{end}}
    {{- range $name, $query := $queryMap.FilterByStyle "stmt" }}{{ naming $name }}    {{if eq .PrepareStyle "stmt" }}*sqlx.Stmt{{else if eq .PrepareStyle "named_stmt"}}*sqlx.NamedStmt{{else}}string{{end}}    `yesql:"{{ $query.Name }}"`
    {{end}}
    {{- range $name, $query := $queryMap.FilterByStyle "named_stmt" }}{{ naming $name }}    {{if eq .PrepareStyle "stmt" }}*sqlx.Stmt{{else if eq .PrepareStyle "named_stmt"}}*sqlx.NamedStmt{{else}}string{{end}}    `yesql:"{{ $query.Name }}"`
    {{end -}}
}
{{end -}}

{{if .DefaultQueryMapNotEmpty}}
func Build{{ .DefaultStructName }}(p PreparexBuilder{{if .DefaultQueryMap.IsStmtQueryNotEmpty }}, ctx ...context.Context{{end}}) (obj *{{ .DefaultStructName }}, err error) {
	{{- if .DefaultQueryMap.IsStmtQueryNotEmpty -}}
    var c context.Context
	if len(ctx) > 0 && ctx[0] != nil {
		c = ctx[0]
	} else {
		c = context.Background()
	}
    {{- end}}
	obj = &{{ .DefaultStructName }}{{if .DefaultQueryMap.IsRawQueryNotEmpty }}{
        {{range $name, $_ := .DefaultQueryMap.FilterByStyle "raw" }}{{ naming $name }}:    p.QueryHook(_{{ naming $name}}),
        {{end}}}{{else}}{}{{end}}
    {{- range $name, $_ := .DefaultQueryMap.FilterByStyle "stmt" }}
    if obj.{{ naming $name }}, err = p.PreparexContext(c, p.Rebind(p.QueryHook(_{{ naming $name }}))); err != nil {
		return
	}{{end}}
    {{- range $name, $_ := .DefaultQueryMap.FilterByStyle "named_stmt" }}
    if obj.{{ naming $name }}, err = p.PrepareNamedContext(c, p.Rebind(p.QueryHook(_{{ naming $name }}))); err != nil {
		return
	}{{end}}
	return
}{{end}}
{{range $scope, $queryMap := .ScopeQuery }}
func Build{{ naming $scope }}(p PreparexBuilder{{if $queryMap.IsStmtQueryNotEmpty }}, ctx ...context.Context{{end}}) (obj *{{ naming $scope }}, err error) {
    {{- if $queryMap.IsStmtQueryNotEmpty -}}
    var c context.Context
	if len(ctx) > 0 && ctx[0] != nil {
		c = ctx[0]
	} else {
		c = context.Background()
	}
    {{- end}}
	obj = &{{naming $scope }}{{if $queryMap.IsRawQueryNotEmpty }}{
        {{range $name, $_ := $queryMap.FilterByStyle "raw" }}{{ naming $name }}:    p.QueryHook(_{{ naming $scope }}_{{ naming $name}}),
        {{end}}}{{else}}{}{{end}}
    {{- range $name, $_ := $queryMap.FilterByStyle "stmt" }}
    if obj.{{ naming $name }}, err = p.PreparexContext(c, p.Rebind(p.QueryHook(_{{ naming $scope }}_{{ naming $name }}))); err != nil {
		return
	}{{end}}
    {{- range $name, $_ := $queryMap.FilterByStyle "named_stmt" }}
    if obj.{{ naming $name }}, err = p.PrepareNamedContext(c, p.Rebind(p.QueryHook(_{{ naming $scope }}_{{ naming $name }}))); err != nil {
		return
	}{{end}}
    return
}
{{end -}}
