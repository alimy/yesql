// Code generated by Yesql. DO NOT EDIT.
// versions:
// - Yesql {{ .YesqlVer }}

package {{ .PkgName }}

import (
	"context"
    "fmt"
	"database/sql"

	{{if .ScopeQueryNotEmpty}}"github.com/alimy/yesql"{{end}}
)

var (
    _ = fmt.Errorf("error for placeholder")
)

const (
    {{range .AllQuery }}_{{if notEmptyStr .Scope}}{{ naming .Scope}}_{{end}}{{ naming .Name }} =  `{{ escape .Query }}`
    {{end -}}
)

{{if .DefaultQueryMapNotEmpty}}type {{ .DefaultStructName }} struct {
    {{range $name, $query := .DefaultQueryMap.FilterByStyle "raw" }}{{ naming $name }}    {{if eq .PrepareStyle "stmt" }}*sql.Stmt{{else}}string{{end}}    `yesql:"{{ $query.Name }}"`
    {{end}}
    {{- range $name, $query := .DefaultQueryMap.FilterByStyle "stmt" }}{{ naming $name }}    {{if eq .PrepareStyle "stmt" }}*sql.Stmt{{else}}string{{end}}    `yesql:"{{ $query.Name }}"`
    {{end -}}
}{{end }}
{{range $scope, $queryMap := .ScopeQuery }}
type {{ naming $scope }} struct {
    yesql.Namespace    `yesql:"{{ $scope }}"`
    {{range $name, $query := $queryMap.FilterByStyle "raw" }}{{ naming $name }}    {{if eq .PrepareStyle "stmt" }}*sql.Stmt{{else}}string{{end}}    `yesql:"{{ $query.Name }}"`
    {{end}}
    {{- range $name, $query := $queryMap.FilterByStyle "stmt" }}{{ naming $name }}    {{if eq .PrepareStyle "stmt" }}*sql.Stmt{{else}}string{{end}}    `yesql:"{{ $query.Name }}"`
    {{end -}}
}
{{end -}}

{{if .DefaultQueryMapNotEmpty}}
func Build{{ .DefaultStructName }}(p yesql.PrepareBuilder{{if .DefaultQueryMap.IsStmtQueryNotEmpty }}, ctx ...context.Context{{end}}) (obj *{{ .DefaultStructName }}, err error) {
	{{- if .DefaultQueryMap.IsStmtQueryNotEmpty -}}
    var c context.Context
	if len(ctx) > 0 && ctx[0] != nil {
		c = ctx[0]
	} else {
		c = context.Background()
	}
    {{- end }}
	obj = &{{ .DefaultStructName }}{{if .DefaultQueryMap.IsRawQueryNotEmpty }}{
        {{range $name, $_ := .DefaultQueryMap.FilterByStyle "raw" }}{{ naming $name }}:    p.QueryHook(_{{ naming $name}}),
        {{end}}}{{else}}{}{{end}}
    {{- range $name, $_ := .DefaultQueryMap.FilterByStyle "stmt" }}
    if obj.{{ naming $name }}, err = p.PrepareContext(c, p.QueryHook(_{{ naming $name }})); err != nil {
		return nil, fmt.Errorf("prepare _{{ naming $name }} error: %w", err)
	}{{end}}
	return
}{{end}}
{{range $scope, $queryMap := .ScopeQuery }}
func Build{{ naming $scope }}(p yesql.PrepareBuilder{{if $queryMap.IsStmtQueryNotEmpty }}, ctx ...context.Context{{end}}) (obj *{{ naming $scope }}, err error) {
     {{- if $queryMap.IsStmtQueryNotEmpty -}}
    var c context.Context
	if len(ctx) > 0 && ctx[0] != nil {
		c = ctx[0]
	} else {
		c = context.Background()
	}
    {{- end }}
	obj = &{{naming $scope }}{{if $queryMap.IsRawQueryNotEmpty }}{
        {{range $name, $_ := $queryMap.FilterByStyle "raw" }}{{ naming $name }}:    p.QueryHook(_{{ naming $scope }}_{{ naming $name }}),
        {{end}}}{{else}}{}{{end}}
    {{- range $name, $_ := $queryMap.FilterByStyle "stmt" }}
    if obj.{{ naming $name }}, err = p.PrepareContext(c, p.QueryHook(_{{ naming $scope }}_{{ naming $name }})); err != nil {
		return nil, fmt.Errorf("prepare _{{ naming $scope }}_{{ naming $name }} error: %w", err)
	}{{end}}
    return
}
{{end -}}
